#!/usr/bin/env python3
"""
MANEJO DE EXCEPCIONES - EJEMPLOS CONFUSOS - Versi√≥n Interactiva
Este c√≥digo demuestra errores y confusiones comunes con el manejo de excepciones en Python.
Los estudiantes pueden interactuar con cada ejemplo, predecir resultados y aprender activamente.
"""

import os
import time

def limpiar_pantalla():
    """Limpia la pantalla de la terminal"""
    os.system('cls' if os.name == 'nt' else 'clear')

def esperar_enter():
    """Espera a que el usuario presione Enter para continuar"""
    input("\nPresiona Enter para continuar...")

def imprimir_encabezado_seccion(titulo):
    """Imprime un encabezado de secci√≥n formateado"""
    print("\n" + "=" * 70)
    print(f" {titulo}")
    print("=" * 70 + "\n")

# ===========================================================================
# Problema 1: Capturar todo con except desnudo
# ===========================================================================
def problema_bare_except():
    """Demuestra el problema con cl√°usulas except desnudas"""
    limpiar_pantalla()
    imprimir_encabezado_seccion("PROBLEMA 1: Capturando Todo con Except Desnudo")
    
    print("¬øQu√© est√° mal con este c√≥digo?")
    print("-" * 50)
    print("""
def dividir(a, b):
    try:
        resultado = a / b
        return resultado
    except:  # ¬°Captura TODO, incluso KeyboardInterrupt!
        print("Ocurri√≥ un error")
        return None

# ¬øQu√© pasa si el usuario presiona Ctrl+C?
# ¬øQu√© pasa si hay un error de tipeo en el nombre de la variable?
# ¬°Nunca sabremos qu√© sali√≥ mal!
    """)
    
    print("\nVeamos qu√© sucede:")
    
    def dividir_malo(a, b):
        try:
            resultado = a / b
            return resultado
        except:
            print("Ocurri√≥ un error")
            return None
    
    print("\nPrueba 1: dividir_malo(10, 2)")
    resultado = dividir_malo(10, 2)
    print(f"Resultado: {resultado}")
    
    print("\nPrueba 2: dividir_malo(10, 0)")
    resultado = dividir_malo(10, 0)
    print(f"Resultado: {resultado}")
    
    print("\n‚ùå PROBLEMAS:")
    print("- No sabemos QU√â error ocurri√≥")
    print("- Captura salidas del sistema e interrupciones de teclado")
    print("- Hace la depuraci√≥n muy dif√≠cil")
    print("- Oculta bugs en el c√≥digo")
    
    print("\nü§î PREGUNTAS PARA PENSAR:")
    print("1. ¬øC√≥mo sabr√≠as qu√© sali√≥ mal en producci√≥n?")
    print("2. ¬øQu√© pasa si hay un error de tipeo en 'resultado'?")
    print("3. ¬øC√≥mo afecta esto a la depuraci√≥n?")
    
    """
    1. ¬øC√≥mo sabr√≠as qu√© sali√≥ mal en producci√≥n?
        No lo sabr√≠as. Al capturar todos los errores sin especificar el tipo ni registrar el mensaje, se pierde informaci√≥n cr√≠tica para el diagn√≥stico.
    2. ¬øQu√© pasa si hay un error de tipeo en 'resultado'?
        El error se capturar√≠a silenciosamente, y el programa seguir√≠a ejecut√°ndose sin alertar del fallo, lo que puede llevar a resultados incorrectos o fallos posteriores.
    3. ¬øC√≥mo afecta esto a la depuraci√≥n?
        Hace que depurar sea extremadamente dif√≠cil, ya que no se tiene informaci√≥n sobre qu√© fall√≥ ni d√≥nde ocurri√≥ el error.
        
    """
    esperar_enter()

# ===========================================================================
# Problema 2: Capturar demasiado ampliamente
# ===========================================================================
def problema_except_amplio():
    """Demuestra el problema de capturar Exception demasiado ampliamente"""
    limpiar_pantalla()
    imprimir_encabezado_seccion("PROBLEMA 2: Capturando Demasiado Ampliamente")
    
    print("¬øCu√°l es el problema aqu√≠?")
    print("-" * 50)
    print("""
def procesar_archivo(nombre_archivo):
    try:
        archivo = open(nombre_archivo, 'r')
        datos = archivo.read()
        archivo.close()
        
        # Procesar datos
        numeros = [int(x) for x in datos.split()]
        promedio = sum(numeros) / len(numeros)
        
        return promedio
    except Exception as e:  # ¬°Demasiado amplio!
        print(f"Error: {e}")
        return None

# ¬øQu√© errores puede ocultar esto?
# ¬øEs apropiado capturar TODOS los errores as√≠?
    """)
    
    print("\nVeamos el problema:")
    
    def procesar_archivo_malo(nombre_archivo, datos):
        try:
            # Simulamos diferentes operaciones
            numeros = [int(x) for x in datos.split()]
            promedio = sum(numeros) / len(numeros)
            return promedio
        except Exception as e:
            print(f"Error: {e}")
            return None
    
    print("\nPrueba 1: Datos v√°lidos")
    resultado = procesar_archivo_malo("test.txt", "10 20 30")
    print(f"Resultado: {resultado}")
    
    print("\nPrueba 2: Datos inv√°lidos")
    resultado = procesar_archivo_malo("test.txt", "10 abc 30")
    print(f"Resultado: {resultado}")
    
    print("\nPrueba 3: Lista vac√≠a")
    resultado = procesar_archivo_malo("test.txt", "")
    print(f"Resultado: {resultado}")
    
    print("\n‚ùå PROBLEMAS:")
    print("- Trata TODOS los errores de la misma manera")
    print("- No distingue entre errores de archivo y errores de datos")
    print("- Podr√≠a capturar errores que NO deber√≠as capturar")
    print("- Dificulta identificar la causa real del problema")
    
    print("\nü§î PREGUNTAS PARA PENSAR:")
    print("1. ¬øQu√© tipos espec√≠ficos de errores pueden ocurrir?")
    print("2. ¬øDeber√≠an manejarse todos de la misma manera?")
    print("3. ¬øQu√© informaci√≥n se pierde al capturar todo?")
    
    """
1. ¬øQu√© tipos espec√≠ficos de errores pueden ocurrir?
    FileNotFoundError si el archivo no existe
    ValueError si los datos no se pueden convertir a enteros
    ZeroDivisionError si se intenta dividir por cero

2. ¬øDeber√≠an manejarse todos de la misma manera?
    No. Cada tipo de error requiere una respuesta diferente. Por ejemplo, un archivo faltante podr√≠a requerir una alerta al usuario, mientras que datos inv√°lidos podr√≠an solicitar una correcci√≥n.
3. ¬øQu√© informaci√≥n se pierde al capturar todo?
    Se pierde el contexto del error, el tipo espec√≠fico, y la posibilidad de tomar decisiones informadas seg√∫n el tipo de excepci√≥n.
    """
    
    esperar_enter()

# ===========================================================================
# Problema 3: Ignorar errores silenciosamente
# ===========================================================================
def problema_ignorar_errores():
    """Demuestra el peligro de ignorar errores silenciosamente"""
    limpiar_pantalla()
    imprimir_encabezado_seccion("PROBLEMA 3: Ignorando Errores Silenciosamente")
    
    print("¬øQu√© hay de malo con este patr√≥n?")
    print("-" * 50)
    print("""
def guardar_configuracion(config):
    try:
        with open('config.txt', 'w') as archivo:
            archivo.write(str(config))
    except:
        pass  # ¬°El usuario no sabe que fall√≥!

# ¬øEl usuario sabe si guard√≥ correctamente?
# ¬øC√≥mo depurar√≠as esto si falla?
    """)
    
    print("\nSimulemos el escenario:")
    
    def guardar_config_malo(config, simular_error=False):
        try:
            if simular_error:
                raise IOError("No hay permisos de escritura")
            print(f"  [Guardando] {config}")
            return True
        except:
            pass  # Silencioso
    
    print("\nPrueba 1: Guardado exitoso")
    guardar_config_malo({"tema": "oscuro"}, False)
    print("¬øSe guard√≥? No hay forma de saberlo...")
    
    print("\nPrueba 2: Guardado fallido")
    guardar_config_malo({"tema": "oscuro"}, True)
    print("¬øSe guard√≥? No hay forma de saberlo...")
    
    print("\n‚ùå PROBLEMAS:")
    print("- El usuario no recibe ning√∫n feedback")
    print("- Imposible depurar cuando falla")
    print("- Datos pueden perderse sin que nadie lo sepa")
    print("- Viola el principio de 'fail fast'")
    
    print("\nü§î PREGUNTAS PARA PENSAR:")
    print("1. ¬øQu√© deber√≠a suceder cuando falla el guardado?")
    print("2. ¬øC√≥mo informar√≠as al usuario?")
    print("3. ¬øEs este error algo que deber√≠as manejar?")
    
    """
1. ¬øQu√© deber√≠a suceder cuando falla el guardado?
    El sistema deber√≠a notificar al usuario que el guardado fall√≥ y registrar el error para an√°lisis posterior.
2. ¬øC√≥mo informar√≠as al usuario?
    Con un mensaje claro en la interfaz, como: ‚ÄúNo se pudo guardar la configuraci√≥n. Verifica los permisos o el espacio en disco.‚Äù
3. ¬øEs este error algo que deber√≠as manejar?
    S√≠, pero no silenciosamente. Debe manejarse con una notificaci√≥n adecuada y posiblemente una acci√≥n correctiva.
        
    """
    esperar_enter()

# ===========================================================================
# Problema 4: Confusi√≥n con else y finally
# ===========================================================================
def problema_else_finally():
    """Demuestra confusi√≥n com√∫n con else y finally"""
    limpiar_pantalla()
    imprimir_encabezado_seccion("PROBLEMA 4: Confusi√≥n con Else y Finally")
    
    print("¬øCu√°ndo se ejecuta cada bloque?")
    print("-" * 50)
    print("""
def operacion_confusa(tiene_error):
    try:
        if tiene_error:
            raise ValueError("Error simulado")
        print("Operaci√≥n exitosa")
    except ValueError:
        print("Manejando error")
    else:
        print("Esto se ejecuta...")  # ¬øCu√°ndo?
    finally:
        print("Esto siempre se ejecuta...")  # ¬øCu√°ndo?
    """)
    
    print("\nVeamos la ejecuci√≥n:")
    
    def operacion_confusa(tiene_error):
        print(f"\n[Ejecutando con tiene_error={tiene_error}]")
        try:
            print("  1. En el bloque try")
            if tiene_error:
                raise ValueError("Error simulado")
            print("  2. Try completado sin error")
        except ValueError:
            print("  2. En el bloque except")
        else:
            print("  3. En el bloque else")
        finally:
            print("  4. En el bloque finally")
    
    print("\nCaso 1: Sin error")
    operacion_confusa(False)
    
    print("\nCaso 2: Con error")
    operacion_confusa(True)
    
    print("\n‚ùå CONFUSIONES COMUNES:")
    print("- Pensar que else siempre se ejecuta")
    print("- No entender cu√°ndo usar else vs finally")
    print("- Poner c√≥digo en el lugar equivocado")
    print("- No saber que finally se ejecuta incluso con return")
    
    print("\nü§î PREGUNTAS PARA PENSAR:")
    print("1. ¬øEn qu√© se diferencia else de finally?")
    print("2. ¬øCu√°ndo usar√≠as cada uno?")
    print("3. ¬øQu√© pasa si hay un return en try?")
    
    """
1. ¬øEn qu√© se diferencia else de finally?

    else se ejecuta solo si no ocurre ninguna excepci√≥n en el bloque try.
    finally se ejecuta siempre, ocurra o no una excepci√≥n.

2. ¬øCu√°ndo usar√≠as cada uno?

    else: para ejecutar c√≥digo que depende de que no haya errores.
    finally: para liberar recursos, cerrar archivos, o limpiar estados, sin importar si hubo error.

3. ¬øQu√© pasa si hay un return en try?
    El bloque finally se ejecutar√° antes de que se complete el return.    
    
        
    """
    
    esperar_enter()

# ===========================================================================
# Problema 5: Uso incorrecto de raise
# ===========================================================================
def problema_raise_incorrecto():
    """Demuestra errores comunes al usar raise"""
    limpiar_pantalla()
    imprimir_encabezado_seccion("PROBLEMA 5: Uso Incorrecto de Raise")
    
    print("¬øQu√© est√° mal con estos usos de raise?")
    print("-" * 50)
    print("""
# Problema A: Raise gen√©rico
def validar_edad(edad):
    if edad < 0:
        raise Exception("Edad inv√°lida")  # ¬°Demasiado gen√©rico!

# Problema B: Mensaje no informativo
def dividir(a, b):
    if b == 0:
        raise ValueError("Error")  # ¬°No dice qu√© est√° mal!

# Problema C: Tipo de excepci√≥n incorrecto
def abrir_archivo(nombre):
    if not nombre:
        raise ValueError("Nombre vac√≠o")  # ¬øValueError?
    """)
    
    print("\nVeamos los problemas:")
    
    print("\nProblema A: Excepci√≥n demasiado gen√©rica")
    try:
        raise Exception("Algo sali√≥ mal")
    except Exception as e:
        print(f"  Capturado: {type(e).__name__}: {e}")
        print("  ¬øQu√© tipo de error es? ¬°No lo sabemos!")
    
    print("\nProblema B: Mensaje no informativo")
    try:
        raise ValueError("Error")
    except ValueError as e:
        print(f"  Capturado: {e}")
        print("  ¬øQu√© valor est√° mal? ¬øPor qu√©? ¬°No ayuda!")
    
    print("\nProblema C: Tipo incorrecto")
    try:
        nombre = ""
        if not nombre:
            raise ValueError("Nombre vac√≠o")
    except ValueError as e:
        print(f"  Capturado: {e}")
        print("  ¬øValueError es el tipo correcto para esto?")
    
    print("\n‚ùå PROBLEMAS:")
    print("- Excepciones gen√©ricas no ayudan a los llamadores")
    print("- Mensajes vagos dificultan la depuraci√≥n")
    print("- Tipos incorrectos confunden el prop√≥sito del error")
    print("- No proporciona informaci√≥n √∫til para solucionar")
    
    print("\nü§î PREGUNTAS PARA PENSAR:")
    print("1. ¬øQu√© tipo de excepci√≥n ser√≠a m√°s apropiado?")
    print("2. ¬øQu√© informaci√≥n deber√≠a incluir el mensaje?")
    print("3. ¬øC√≥mo ayuda esto a quien llama la funci√≥n?")

    """
1. ¬øQu√© tipo de excepci√≥n ser√≠a m√°s apropiado?
    Depende del contexto. Por ejemplo:

    ValueError para valores inv√°lidos
    TypeError para tipos incorrectos
    FileNotFoundError para archivos faltantes

2. ¬øQu√© informaci√≥n deber√≠a incluir el mensaje?
    Debe ser claro y espec√≠fico: qu√© fall√≥, por qu√©, y c√≥mo puede corregirse. Ejemplo: "Edad debe ser mayor que cero".
3. ¬øC√≥mo ayuda esto a quien llama la funci√≥n?
    Permite manejar el error adecuadamente, mostrar mensajes √∫tiles al usuario, y tomar decisiones informadas.
    """
    
    esperar_enter()

# ===========================================================================
# Problema 6: No re-lanzar excepciones apropiadamente
# ===========================================================================
def problema_no_relanzar():
    """Demuestra cu√°ndo y c√≥mo re-lanzar excepciones"""
    limpiar_pantalla()
    imprimir_encabezado_seccion("PROBLEMA 6: No Re-lanzar Apropiadamente")
    
    print("¬øDeber√≠as siempre capturar y consumir errores?")
    print("-" * 50)
    print("""
def operacion_interna():
    try:
        # Operaci√≥n cr√≠tica
        resultado = procesar_datos_criticos()
        return resultado
    except Exception as e:
        print(f"Error interno: {e}")
        return None  # ¬øEs correcto ocultar el error?

# ¬øQu√© pasa si el llamador necesita saber que fall√≥?
# ¬øDeber√≠as siempre manejar el error localmente?
    """)
    
    print("\nComparaci√≥n de enfoques:")
    
    def enfoque_malo():
        print("\nEnfoque Malo: Tragar el error")
        try:
            print("  1. Intentando operaci√≥n cr√≠tica...")
            raise ValueError("Fallo cr√≠tico")
        except ValueError as e:
            print(f"  2. Error capturado: {e}")
            print("  3. Retornando None (¬°el llamador no sabe del error!)")
            return None
    
    def enfoque_mejor():
        print("\nEnfoque Mejor: Registrar y re-lanzar")
        try:
            print("  1. Intentando operaci√≥n cr√≠tica...")
            raise ValueError("Fallo cr√≠tico")
        except ValueError as e:
            print(f"  2. Error capturado: {e}")
            print("  3. Registrando para depuraci√≥n...")
            print("  4. Re-lanzando para que el llamador pueda manejar")
            raise  # Re-lanza la misma excepci√≥n
    
    resultado1 = enfoque_malo()
    print(f"Resultado: {resultado1}")
    
    try:
        resultado2 = enfoque_mejor()
    except ValueError:
        print("Llamador: Puedo manejar esto apropiadamente")
    
    print("\n‚ùå PROBLEMAS CON NO RE-LANZAR:")
    print("- El llamador pierde informaci√≥n sobre el error")
    print("- Dificulta el manejo de errores en niveles superiores")
    print("- Puede causar problemas silenciosos m√°s adelante")
    print("- Retornar None puede ser ambiguo")
    
    print("\nü§î PREGUNTAS PARA PENSAR:")
    print("1. ¬øCu√°ndo deber√≠as capturar y manejar?")
    print("2. ¬øCu√°ndo deber√≠as capturar, registrar y re-lanzar?")
    print("3. ¬øCu√°ndo NO deber√≠as capturar en absoluto?")

    """
1. ¬øCu√°ndo deber√≠as capturar y manejar?
    Cuando puedes resolver el problema localmente sin afectar el flujo general del programa.
2. ¬øCu√°ndo deber√≠as capturar, registrar y re-lanzar?
    Cuando necesitas registrar el error para auditor√≠a o depuraci√≥n, pero no puedes resolverlo localmente y el llamador debe decidir qu√© hacer.
3. ¬øCu√°ndo NO deber√≠as capturar en absoluto?
    Cuando el error debe propagarse naturalmente para que el sistema lo maneje en un nivel superior (por ejemplo, errores cr√≠ticos que deben detener el programa).
    """    
    esperar_enter()

# ===========================================================================
# Problema 7: Manejo de excepciones en bucles
# ===========================================================================
def problema_excepciones_en_bucles():
    """Demuestra problemas comunes con excepciones en bucles"""
    limpiar_pantalla()
    imprimir_encabezado_seccion("PROBLEMA 7: Excepciones en Bucles")
    
    print("¬øQu√© pasa cuando una excepci√≥n ocurre en un bucle?")
    print("-" * 50)
    print("""
def procesar_lista_malo(elementos):
    resultados = []
    for elemento in elementos:
        resultado = procesar(elemento)  # ¬øY si esto falla?
        resultados.append(resultado)
    return resultados

# ¬øQu√© pasa si un elemento causa error?
# ¬øSe procesan los dem√°s elementos?
    """)
    
    print("\nComparemos enfoques:")
    
    elementos = ["10", "20", "abc", "40", "xyz"]
    
    print("\nEnfoque 1: Sin manejo (se rompe en el primer error)")
    print(f"Procesando: {elementos}")
    try:
        resultados = []
        for elem in elementos:
            resultado = int(elem) * 2
            resultados.append(resultado)
            print(f"  ‚úì Procesado: {elem} -> {resultado}")
    except ValueError as e:
        print(f"  ‚úó Error en '{elem}': {e}")
        print(f"  Elementos procesados: {resultados}")
        print(f"  Elementos restantes: perdidos")
    
    print("\nEnfoque 2: Con manejo (contin√∫a con los dem√°s)")
    print(f"Procesando: {elementos}")
    resultados = []
    errores = []
    for elem in elementos:
        try:
            resultado = int(elem) * 2
            resultados.append(resultado)
            print(f"  ‚úì Procesado: {elem} -> {resultado}")
        except ValueError as e:
            errores.append((elem, str(e)))
            print(f"  ‚úó Saltado: {elem} (error: {e})")
    
    print(f"\nResultados: {resultados}")
    print(f"Errores: {len(errores)}")
    
    print("\n‚ùå PROBLEMAS:")
    print("- Sin manejo: un error detiene todo el proceso")
    print("- Con manejo: necesitas decidir qu√© hacer con errores")
    print("- Puede ser dif√≠cil reportar qu√© fall√≥ y qu√© no")
    
    print("\nü§î PREGUNTAS PARA PENSAR:")
    print("1. ¬øDeber√≠a un error detener todo el proceso?")
    print("2. ¬øC√≥mo reportar√≠as m√∫ltiples errores?")
    print("3. ¬øQu√© pasa si TODOS los elementos fallan?")
    """
1. ¬øDeber√≠a un error detener todo el proceso?
    Depende del contexto. En procesamiento de lotes, lo ideal es continuar con los elementos v√°lidos y registrar los errores.
2. ¬øC√≥mo reportar√≠as m√∫ltiples errores?
    Acumulando los errores en una lista o log, y mostrando un resumen al final del proceso.
3. ¬øQu√© pasa si TODOS los elementos fallan?
    Debe mostrarse un mensaje claro indicando que no se pudo procesar ning√∫n elemento, y posiblemente ofrecer opciones para reintentar o revisar los datos.
    """    
    esperar_enter()

# ===========================================================================
# Men√∫ Principal
# ===========================================================================
def menu_principal():
    """Muestra el men√∫ principal y maneja la navegaci√≥n"""
    while True:
        limpiar_pantalla()
        imprimir_encabezado_seccion("EJEMPLOS CONFUSOS DE MANEJO DE EXCEPCIONES")
        
        print("Selecciona un problema para explorar:\n")
        print("1. Except desnudo (bare except)")
        print("2. Capturar demasiado ampliamente")
        print("3. Ignorar errores silenciosamente")
        print("4. Confusi√≥n con else y finally")
        print("5. Uso incorrecto de raise")
        print("6. No re-lanzar apropiadamente")
        print("7. Excepciones en bucles")
        print("\n0. Salir")
        
        try:
            opcion = input("\nElige una opci√≥n (0-7): ")
            
            if opcion == '0':
                limpiar_pantalla()
                print("\n" + "=" * 70)
                print(" ¬°Gracias por explorar el manejo de excepciones!")
                print("=" * 70 + "\n")
                break
            elif opcion == '1':
                problema_bare_except()
            elif opcion == '2':
                problema_except_amplio()
            elif opcion == '3':
                problema_ignorar_errores()
            elif opcion == '4':
                problema_else_finally()
            elif opcion == '5':
                problema_raise_incorrecto()
            elif opcion == '6':
                problema_no_relanzar()
            elif opcion == '7':
                problema_excepciones_en_bucles()
            else:
                print("\n‚ùå Opci√≥n inv√°lida. Presiona Enter para intentar de nuevo...")
                esperar_enter()
        
        except KeyboardInterrupt:
            print("\n\n¬°Interrumpido por el usuario!")
            break
        except Exception as e:
            print(f"\n‚ùå Error inesperado: {e}")
            esperar_enter()

# ===========================================================================
# Punto de entrada
# ===========================================================================
if __name__ == "__main__":
    menu_principal()
